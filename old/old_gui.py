# -*- coding: utf-8 -*-
import re

# Form implementation generated from reading ui file '.\gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget


class Ui_mainWindow(object):

    # def __init__(self):
    #
    def __init__(self):
        # 剪贴板
        self.clipboard = QtWidgets.QApplication.clipboard()

    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(714, 384)
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.splitter_5 = QtWidgets.QSplitter(self.centralwidget)
        self.splitter_5.setOrientation(QtCore.Qt.Vertical)
        self.splitter_5.setObjectName("splitter_5")
        self.splitter_3 = QtWidgets.QSplitter(self.splitter_5)
        self.splitter_3.setOrientation(QtCore.Qt.Vertical)
        self.splitter_3.setObjectName("splitter_3")
        self.widget = QtWidgets.QWidget(self.splitter_3)
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.CurrentStoreLabel = QtWidgets.QLabel(self.widget)
        self.CurrentStoreLabel.setObjectName("CurrentStoreLabel")
        self.verticalLayout.addWidget(self.CurrentStoreLabel)
        self.CurrentUserLabel = QtWidgets.QLabel(self.widget)
        self.CurrentUserLabel.setObjectName("CurrentUserLabel")
        self.verticalLayout.addWidget(self.CurrentUserLabel)
        self.CurrentOrderLabel = QtWidgets.QLabel(self.widget)
        self.CurrentOrderLabel.setObjectName("CurrentOrderLabel")
        self.verticalLayout.addWidget(self.CurrentOrderLabel)
        self.CurrentOrderInfo = QtWidgets.QTextBrowser(self.splitter_3)
        self.CurrentOrderInfo.setObjectName("CurrentOrderInfo")
        self.splitter_4 = QtWidgets.QSplitter(self.splitter_5)
        self.splitter_4.setOrientation(QtCore.Qt.Vertical)
        self.splitter_4.setObjectName("splitter_4")
        self.GetBicButton = QtWidgets.QPushButton(self.splitter_4)
        self.GetBicButton.setObjectName("GetBicButton")
        self.BicLabel = QtWidgets.QLabel(self.splitter_4)
        self.BicLabel.setObjectName("BicLabel")
        self.QuitButton = QtWidgets.QPushButton(self.splitter_5)
        self.QuitButton.setObjectName("QuitButton")
        self.gridLayout.addWidget(self.splitter_5, 0, 0, 1, 1)
        self.splitter_2 = QtWidgets.QSplitter(self.centralwidget)
        self.splitter_2.setOrientation(QtCore.Qt.Vertical)
        self.splitter_2.setObjectName("splitter_2")
        self.widget1 = QtWidgets.QWidget(self.splitter_2)
        self.widget1.setObjectName("widget1")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget1)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.ChoiceFlagLabel = QtWidgets.QLabel(self.widget1)
        self.ChoiceFlagLabel.setObjectName("ChoiceFlagLabel")
        self.verticalLayout_2.addWidget(self.ChoiceFlagLabel)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.FlagRed = QtWidgets.QRadioButton(self.widget1)
        self.FlagRed.setObjectName("FlagRed")
        self.horizontalLayout.addWidget(self.FlagRed)
        self.FlagGrey = QtWidgets.QRadioButton(self.widget1)
        self.FlagGrey.setObjectName("FlagGrey")
        self.horizontalLayout.addWidget(self.FlagGrey)
        self.FlagYellow = QtWidgets.QRadioButton(self.widget1)
        self.FlagYellow.setObjectName("FlagYellow")
        self.horizontalLayout.addWidget(self.FlagYellow)
        self.FlagGreen = QtWidgets.QRadioButton(self.widget1)
        self.FlagGreen.setObjectName("FlagGreen")
        self.horizontalLayout.addWidget(self.FlagGreen)
        self.FlagBlue = QtWidgets.QRadioButton(self.widget1)
        self.FlagBlue.setObjectName("FlagBlue")
        self.horizontalLayout.addWidget(self.FlagBlue)
        self.FlagPurple = QtWidgets.QRadioButton(self.widget1)
        self.FlagPurple.setObjectName("FlagPurple")
        self.horizontalLayout.addWidget(self.FlagPurple)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.RemarkLabel = QtWidgets.QLabel(self.splitter_2)
        self.RemarkLabel.setObjectName("RemarkLabel")
        self.RemarkTextInput = QtWidgets.QTextEdit(self.splitter_2)
        self.RemarkTextInput.setObjectName("RemarkTextInput")
        self.splitter = QtWidgets.QSplitter(self.splitter_2)
        self.splitter.setOrientation(QtCore.Qt.Vertical)
        self.splitter.setObjectName("splitter")
        self.widget2 = QtWidgets.QWidget(self.splitter)
        self.widget2.setObjectName("widget2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.ClearRemarkButton = QtWidgets.QPushButton(self.widget2)
        self.ClearRemarkButton.setObjectName("ClearRemarkButton")
        self.horizontalLayout_2.addWidget(self.ClearRemarkButton)
        self.SubmitRemarkBotton = QtWidgets.QPushButton(self.widget2)
        self.SubmitRemarkBotton.setObjectName("SubmitRemarkButton")
        self.horizontalLayout_2.addWidget(self.SubmitRemarkBotton)
        # self.SwitchUserBotton = QtWidgets.QPushButton(self.splitter)
        # self.SwitchUserBotton.setObjectName("SwitchUserBotton")
        self.gridLayout.addWidget(self.splitter_2, 0, 1, 1, 1)
        mainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(mainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 714, 23))
        self.menubar.setObjectName("menubar")
        mainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

        # 剪贴板
        self.clipboard.dataChanged.connect(self.clipboard_changed)

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "备注监控"))
        self.CurrentStoreLabel.setText(_translate("mainWindow", "当前店铺：xxx"))
        self.CurrentUserLabel.setText(_translate("mainWindow", "当前用户：xxx"))
        self.CurrentOrderLabel.setText(_translate("mainWindow", "当前订单：xxx"))
        self.CurrentOrderInfo.setHtml(_translate("mainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">当前订单信息</p></body></html>"))
        self.GetBicButton.setText(_translate("mainWindow", "获取BIC码"))
        self.BicLabel.setText(_translate("mainWindow", "获取到的BIC码"))
        self.QuitButton.setText(_translate("mainWindow", "退出程序"))
        self.ChoiceFlagLabel.setText(_translate("mainWindow", "选择一个 flag"))
        self.FlagRed.setText(_translate("mainWindow", "红色"))
        self.FlagGrey.setText(_translate("mainWindow", "灰色"))
        self.FlagYellow.setText(_translate("mainWindow", "黄色"))
        self.FlagGreen.setText(_translate("mainWindow", "绿色"))
        self.FlagBlue.setText(_translate("mainWindow", "蓝色"))
        self.FlagPurple.setText(_translate("mainWindow", "紫色"))
        self.RemarkLabel.setText(_translate("mainWindow", "备注输入框"))
        self.ClearRemarkButton.setText(_translate("mainWindow", "清空"))
        self.SubmitRemarkBotton.setText(_translate("mainWindow", "提交"))
        # self.SwitchUserBotton.setText(_translate("mainWindow", "切换用户"))

        # 退出程序按钮
        self.QuitButton.clicked.connect(mainWindow.close)

        # 切换用户按钮
    #     self.SwitchUserBotton.clicked.connect(self.switch_user)
    #
    # def switch_user(self):
    #     """
    #     切换用户, TODO
    #     :return:
    #     """
    #
    #     return None


    def check_order(self, text):
        """
        正则校验是否为订单编号
        r'^\d{15,20}$|^\d{5,10}-\d{15,20}$
        :return:
        """
        text = text.strip()
        if re.match(r'^\d{15,20}$|^\d{5,10}-\d{15,20}$', text):
            return text
        else:
            return None

    def get_order_info(self, order):
        """
        获取订单信息 TODO 需要请求API
        :param order:
        :return:
        """
        data = {
            'order_id': order,
            'store': '测试店铺',
            'user': '测试用户',
            'remark': '测试备注',
            'flag': 'red'
        }
        return data

    def display_order_info(self, order):
        """
        获取订单信息并显示
        :param order:
        :return:
        """
        # 显示订单编号
        self.CurrentOrderLabel.setText('当前订单：' + order)
        # 获取订单信息
        order_info = self.get_order_info(order)
        # 显示订单信息
        self.CurrentOrderInfo.setText(str(order_info))

    def clipboard_changed(self):
        text = self.clipboard.text()
        # 先校验内容是否为文本，不能为图片等
        if not self.clipboard.mimeData().hasText():
            print('非文本内容')
        print('文本内容：', text, '长度：', len(text), '类型：', type(text))

        # 校验是否为订单编号
        order_id = self.check_order(text)
        if order_id:
            print('检测到订单编号：', order_id)
            # 设置当前订单信息
            self.display_order_info(order_id)
            # 设置置顶
            mainWindow.setWindowFlag(QtCore.Qt.WindowStaysOnTopHint)
            mainWindow.show()
            # 取消置顶
            mainWindow.setWindowFlag(QtCore.Qt.WindowStaysOnTopHint, False)
            mainWindow.show()

        else:
            print('非订单编号', text)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_mainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec_())
